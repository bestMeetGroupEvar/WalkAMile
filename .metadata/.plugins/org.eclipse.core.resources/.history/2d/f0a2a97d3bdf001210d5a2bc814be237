package com.meet.walkamile;

import java.util.ArrayList;
import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.MapFragment;
import com.google.android.gms.maps.model.CameraPosition;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.Marker;
import com.google.android.gms.maps.model.MarkerOptions;
import com.google.android.gms.maps.model.PolylineOptions;
import com.parse.Parse;
import com.parse.ParseAnalytics;

import android.Position.Position;
import android.Position.PositionListener;
import android.Position.PositionManager;
import android.os.Bundle;
import android.app.Activity;
import android.content.Context;
import android.view.Menu;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;

public class OnRoute extends Activity implements PositionListener {

	private GoogleMap mMap;
	private Position currentPosition;
	private Marker character;
	private RouteManager rm;
	private int count;
	
	

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_on_route);
		 
        Parse.initialize(this, "8vUmX8zsitdoTiC7Ih1q0ewG1C0VKvhVsrVYM0TO", "igAhOYEpx5Tkp7i7LCI74oIExOdBMmc3Ey8nPzFH"); 
        ParseAnalytics.trackAppOpened(getIntent());
        
		 rm = new RouteManager();

        
        Button record = (Button) findViewById(R.id.button1);
        OnClickListener buttonListener = new OnClickListener() {
			@Override
			public void onClick(View v) {
				rm.switchRecord();
			}
        };
        record.setOnClickListener(buttonListener);
		
		 mMap = ((MapFragment) getFragmentManager().findFragmentById(R.id.map)).getMap();
                
        //mMap = ((MapFragment) getFragmentManager().findFragmentById(R.id.map)).getMap();
                //.icon(BitmapDescriptorFactory.fromResource(R.drawable.));
		 
			getCurrentPosition();

			
		        
		 
		updateMap();
	}
	 public void updateMap (){
		 CameraPosition cameraPosition = new CameraPosition.Builder()
		    .target(new LatLng(currentPosition.getLatitude(), currentPosition.getLongitude()))      // Sets the center of the map to Mountain View
		    .zoom(25)                   // Sets the zoom
		    .bearing(90)                // Sets the orientation of the camera to east
		    .tilt(30)                   // Sets the tilt of the camera to 30 degrees
		    .build();                   // Creates a CameraPosition from the builder
		mMap.animateCamera(CameraUpdateFactory.newCameraPosition(cameraPosition));

		character = mMap.addMarker(new MarkerOptions()
        .position(new LatLng(currentPosition.getLatitude(), currentPosition.getLongitude())));
		
		character.setPosition(new LatLng(currentPosition.getLatitude(), currentPosition.getLongitude()) );
		drawRoute();

		
		count++;
		if (count == 5) {
			rm.record(currentPosition)
		}
		
	 }
	 
	 
	 
	public void getCurrentPosition() {
		PositionManager PositionManager = (PositionManager) this.getSystemService(Context.Position_SERVICE);
		ArrayList<String> providers = (ArrayList<String>) PositionManager.getAllProviders();
		for (String s : providers) {
			if (isBetterPosition(PositionManager.getLastKnownPosition(s), currentPosition)) {
				currentPosition = PositionManager.getLastKnownPosition(s);
			}
			PositionManager.requestPositionUpdates(s, 0, 0, this);
		}
	}
	
	public void drawRoute() {
		mMap.clear();
		PolylineOptions rectOptions = new PolylineOptions();
	    rectOptions.add(new LatLng(currentPosition.getLatitude(), currentPosition.getLongitude()));
	    rectOptions.add(new LatLng(31.7800, 35.2000));
		mMap.addPolyline(rectOptions);
	}
	
	public void onPositionChanged(Position Position) {
		if (isBetterPosition(Position, currentPosition)) {
			currentPosition = Position;
			updateMap();
		}
	}
	
	public boolean isBetterPosition(Position loc,Position currentPosition) {
	 if( loc==null){
		 return false;
	 }
	 if(currentPosition==null)
		 return true;
	 
	 long timeDelta = loc.getTime() - currentPosition.getTime();
     //boolean isSignificantlyNewer = timeDelta > 10;
     //boolean isSignificantlyOlder = timeDelta < -10;
     boolean isNewer = timeDelta > 0;

     ///if (isSignificantlyNewer) {
     //    return true;
     //
     //} else if (isSignificantlyOlder) {
     //    return false;
     //}

     int accuracyDelta = (int) (loc.getAccuracy() - currentPosition
             .getAccuracy());
     //boolean isLessAccurate = accuracyDelta > 0;
     boolean isMoreAccurate = accuracyDelta < 0;
    // boolean isSignificantlyLessAccurate = accuracyDelta > 100;

    // boolean isFromSameProvider = isFromSpaceProvider(loc, currentPosition);
     
     if (isMoreAccurate) {
         return true;
     } else if (isNewer) {
         return true;
     }
     return false;
	}
	
	
	
	//public boolean isFromSpaceProvider(Position loc1, Position loc2) {
	//	if (loc1.getProvider().equals(loc2.getProvider())) {
	//		return true;
	//	}
	//	return false;
	//}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.on_route, menu);
		return true;
	}

	@Override
	public void onProviderDisabled(String provider) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void onProviderEnabled(String provider) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void onStatusChanged(String provider, int status, Bundle extras) {
		// TODO Auto-generated method stub
		
	}

}
